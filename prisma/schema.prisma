// Define the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator for Prisma Client
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// User model
model User {
  id                  String   @id @default(uuid())
  firstName           String
  lastName            String
  phoneNumber         String   @unique
  email               String?  @unique
  county              String?
  town                String?
  gender              String
  password            String
  roles               String[]
  permissions         Json?
  resetCode           String?    // Hashed OTP
  resetCodeExpiresAt  DateTime?  // OTP expiry timestamp
  otpAttempts         Int        @default(0) 
  createdAt DateTime @default(now())
  // Tracks OTP verification attempts
}

// Customer model
model Customer {
  id                    String                @id @default(uuid())
  firstName             String
  lastName              String
  email                 String?
  phoneNumber           String                @unique
  secondaryPhoneNumber  String?
  gender                String?
  county                String?
  town                  String?
  location              String?
  estateName            String?               // Optional estate name
  building              String?               // Optional building name
  houseNumber           String?               // Optional house number
  category              String?
  monthlyCharge         Float
  status                CustomerStatus        @default(ACTIVE)
  garbageCollectionDay  GarbageCollectionDay  // Enum for days of the week
  invoices              Invoice[]
  receipts              Receipt[]
  collected             Boolean               @default(false)  
  closingBalance        Float                 @default(0) // Add closing balance field
}

// Enum for days of the week
enum GarbageCollectionDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// Enum for customer status
enum CustomerStatus {
  ACTIVE
  DORMANT
}

// Invoice model
model Invoice {
  id                  String       @id @default(uuid())
  customerId          String
  invoicePeriod       DateTime
  invoiceNumber       String       @unique // Ensure uniqueness
  invoiceAmount       Float        
  closingBalance      Float        // To track balance for this invoice
  status              InvoiceStatus @default(UNPAID) 
  isSystemGenerated   Boolean    
  createdAt           DateTime     @default(now())
  amountPaid          Float        @default(0) // Track the amount paid

  customer            Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items               InvoiceItem[]
  
  // Many-to-many relation to Receipt through ReceiptInvoice
  receiptInvoices     ReceiptInvoice[] @relation("InvoiceReceipts")
}

// Enum for invoice status
enum InvoiceStatus {
  UNPAID
  PAID
  PPAID
  CANCELLED
}

// InvoiceItem model
model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String   
  amount      Float    
  quantity    Int      

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Enum for payment methods
enum ModeOfPayment {
  CASH
  MPESA
  BANK
}

// Receipt model
model Receipt {
  id             String      @id @default(uuid())
  receiptNumber  String      @unique // Ensure uniqueness of the receipt number
  amount         Float
  modeOfPayment  ModeOfPayment
  paidBy         String?
  transactionCode String?
  phoneNumber    String?
  paymentId      String? @unique // Link to Payment and make it unique

  // Relations
  payment        Payment?   @relation(fields: [paymentId], references: [id])
  receiptInvoices ReceiptInvoice[] @relation("InvoiceReceipts")
  customer       Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  createdAt      DateTime    @default(now())
}

// Payment model
model Payment {
  id             String      @id @default(uuid())
  amount         Float
  modeOfPayment  ModeOfPayment
  firstName      String?
  receipted      Boolean     @default(false)
  transactionId  String?     @unique 
  ref            String?  

  // One-to-one relationship with Receipt
  receipt        Receipt?    
  createdAt      DateTime    @default(now()) // Automatically set when created
}

// MpesaTransaction model
model MpesaTransaction {
  id              String      @id @default(uuid())
  transID         String      @unique     
  transTime       DateTime    
  transAmount     Float       
  billRefNumber   String  
  msisdn          String      
  firstName       String      
  processed       Boolean     @default(false) 
  createdAt       DateTime    @default(now()) 
}

// ReceiptInvoice model
model ReceiptInvoice {
  id          String      @id @default(uuid())
  receiptId   String
  invoiceId   String

  // Relations
  receipt     Receipt?     @relation("InvoiceReceipts", fields: [receiptId], references: [id], onDelete: Cascade)
  invoice     Invoice?     @relation("InvoiceReceipts", fields: [invoiceId], references: [id], onDelete: Cascade)
}

// SMS model
model SMS {
  id           String    @id @default(uuid())
  clientsmsid  Int       @unique // Use the unique identifier to track SMS
  customerId   String?   // Optional: Relate to Customer
  mobile       String    // Recipient's mobile number
  message      String    // SMS message content
  status       String    // Store delivery status here
  response     Json?     // Store API response if needed
  createdAt    DateTime  @default(now())
}
